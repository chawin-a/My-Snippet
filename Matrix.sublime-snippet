<snippet>
    <content><![CDATA[
struct Matrix {
    vector< vector<LL> > mat;
    int row, col;

    Matrix() {}
    Matrix(int r, int c, int v = 0) : row(r), col(c) {
        mat.assign(r, vector<LL>(c, v));
    }
    Matrix(vector< vector<LL> > v) : mat(v), row(v.size()), col(v[0].size()) {}

    static Matrix identity(int n) { // = Matrix::identity(dimension_size)
        vector< vector<LL> > values(n, vector<LL>(n, 0));
        for(int i = 0; i < n; i++)
            values[i][i] = 1;
        return values;
    }

    Matrix operator*(const Matrix &other) const {
        int n = row, m = other.col;
        vector< vector<LL> > result(n, vector<LL>(m, 0));
        for(int i = 0; i < n; i++)
            for(int k = 0; k < col; k++)
                for(int j = 0; j < m; j++)
                    result[i][j] = (result[i][j] + mat[i][k] * other.mat[k][j]) % MOD;
        return Matrix(result);
    }

    inline bool is_square() const {
        return row == col;
    }

    void show() {
        for(int i=0;i<row;i++) {
            for(int j=0;j<col;j++) {
                printf("%-5lld ", mat[i][j]);
            }
            printf("\n");
        }
    }
};

// M_powers[i] is M, raised to 2^i-th power
const int MAXPOW = 65;
Matrix M_powers[MAXPOW];

void pre_pow(Matrix M) {
    assert(M.is_square());
    M_powers[0] = M;

    for(int i = 1; i < MAXPOW; i++)
        M_powers[i] = M_powers[i - 1] * M_powers[i - 1];
}

Matrix mat_pow(LL power) {
    Matrix result = Matrix::identity(M_powers[0].mat.size());
    if(power <= 0) return result;
    int pointer = 0;
    while(power) {
        if(power & 1)
            result = result * M_powers[pointer];
        pointer++;
        power >>= 1;
    }
    return result;
}

Matrix pow(Matrix M, LL power) {
    if(power <= 0) return Matrix::identity(M.mat.size());
    if(power == 1) return M;
    if(power & 1) return M * pow(M, power - 1);
    Matrix x = pow(M, power / 2);
    return x*x;
}$0
]]></content>
    <tabTrigger>matrix</tabTrigger>
    <scope>source.c++</scope>
    <description>matrix</description>
</snippet>
